# vim: syntax=nginx ts=4 sw=4 et
include /etc/nginx/modules-enabled/*;

worker_processes  1;
error_log  /dev/stdout warn;
env ENV;

events {
    worker_connections  4096;
}

http {
    include       mime.types;
    default_type  text/html;

    # required for matching http_origin in cors
    map_hash_bucket_size 128;

    # hide the version in the Server header
    server_tokens off;

    # use real client ip rather than ALB address
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 172.16.0.0/12;
    set_real_ip_from 192.168.0.0/16;
    real_ip_header X-Forwarded-For;

    # apache-style combined log format
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent"';

    access_log  /dev/stdout  main;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  130;
    gzip  on;

    # microcaching
    # The proxy_cache_path will be used to store responses for 1s on select
    # endpoints. This improves performance with minimal impact.
    proxy_cache_path /tmp/cache keys_zone=cache:10m levels=1:2 inactive=600s max_size=100m;

    lua_shared_dict upstream 12k;
    init_by_lua_block {
        local env = os.getenv("ENV");
        ngx.shared.upstream:set("env", env)
        ngx.log(ngx.WARN, "Starting Gothamist web client Nginx with ENV=" .. env)
    }

    map $http_origin $cors_origin {
        default "";
        "~^https?://((.+\.)+)?(nypr\.digital|gothamist\.com)$" "$http_origin";
    }

    upstream fastboot {
        server 127.0.0.1:3000 max_fails=0;
    }

    server {
        listen       80;
        server_name  _;
        resolver     172.16.0.2 valid=60s;

        # This is the docker resolver, it can be used to debug upstreams.
        # resolver     127.0.0.11 valid=10s;

        # CORS should be active in production and testing
        # but unrestricted in other environments.
        set_by_lua_block $cors_origin {
            local env = ngx.shared.upstream:get("env");
            if (env == "prod" or env == "dev") then
                return ngx.var.cors_origin
            else
                return ngx.var.http_origin
            end
        }

        location / {
            include cors.conf;
            include headers.conf;
            include microcache.conf;
            proxy_pass http://fastboot;
        }


        # nginx stats (private)
        location /_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }

        # test endpoint
        location /_test {
            include cors.conf;
            include headers.conf;
            add_header Content-Type text/plain;
            return 200 '{"status": "ok"}';
        }

        # load balancer check
        location /_healthcheck {
            access_log off;
            content_by_lua_block {
                ngx.say("healthy")
            }
        }

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
